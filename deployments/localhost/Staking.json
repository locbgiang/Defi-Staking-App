{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Staking__NeedsMoreThanZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Staking__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_stakingToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_userRewardPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2d4f9b683df71274cb00dd11516a029dab8b1b1173b4e1b45b8f17251bcdd13c",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "936700",
    "logsBloom": "0x
    "blockHash": "0xd7c9d50c8d61fedcdb3bf5f8bcde3183cddf2048e531c8f08f246cd5d5e931de",
    "transactionHash": "0x2d4f9b683df71274cb00dd11516a029dab8b1b1173b4e1b45b8f17251bcdd13c",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "936700",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "7be0cc88a2b00bed59f4f9923e18a923",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Staking__NeedsMoreThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Staking__TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking.sol\":\"Staking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/Staking.sol\":{\"content\":\"// stake: Lock tokens into our smart contract (check)\\r\\n// withdraw: unlock tokens and pull out of the contract (check)\\r\\n// claimReward: users get their reward tokens\\r\\n//      what's a good reward mechanism?\\r\\n//      what's some good reward math?\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nerror Staking__TransferFailed();\\r\\nerror Staking__NeedsMoreThanZero();\\r\\n\\r\\ncontract Staking {\\r\\n    IERC20 public s_stakingToken;\\r\\n    IERC20 public s_rewardToken;\\r\\n    \\r\\n    // address mapped to how much they staked\\r\\n    mapping(address => uint256) public s_balances;\\r\\n\\r\\n    // a mapping of how much each address has been paid\\r\\n    mapping (address => uint256) public s_userRewardPerTokenPaid;\\r\\n\\r\\n    // a mapping of how much reward user has to claim\\r\\n    mapping (address => uint256) public s_rewards;\\r\\n\\r\\n    uint256 REWARD_RATE;\\r\\n    uint256 s_totalSupply;\\r\\n    uint256 s_rewardPerTokenStored;\\r\\n    uint256 s_latestUpdateTime;\\r\\n\\r\\n    modifier updateReward (address account){\\r\\n        // how much reward per token?\\r\\n        // last timestamp\\r\\n        // 12 - 1, user earned X tokens\\r\\n        s_rewardPerTokenStored = rewardPerToken();\\r\\n        s_latestUpdateTime = block.timestamp;\\r\\n        s_rewards[account] = earned(account);\\r\\n        s_userRewardPerTokenPaid[account] = s_rewardPerTokenStored;\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier moreThanZero(uint256 amount){\\r\\n        if(amount == 0){\\r\\n            revert Staking__NeedsMoreThanZero();\\r\\n        }\\r\\n        _;  // when you write a modifier code, this tells you to do whatever the function is doing after the modifier\\r\\n    }\\r\\n\\r\\n    constructor(address stakingToken, address rewardToken){\\r\\n        s_stakingToken = IERC20(stakingToken);\\r\\n        s_rewardToken = IERC20(rewardToken);\\r\\n    }    \\r\\n\\r\\n    function earned (address account ) public view returns(uint256){\\r\\n        uint256 currentBalance = s_balances[account];\\r\\n        // how much they have been paid already\\r\\n        uint256 ammountPaid = s_userRewardPerTokenPaid[account];\\r\\n        uint256 currentRewardPerToken = rewardPerToken();\\r\\n        uint256 pastRewards = s_rewards[account];\\r\\n        uint256 _earned = (currentBalance * (currentRewardPerToken - ammountPaid))/1e18 + pastRewards;\\r\\n        return _earned;\\r\\n    }\\r\\n\\r\\n    // how much reward per token\\r\\n    // based on how long it's been during this most recent snapshot\\r\\n    function rewardPerToken() public view returns(uint256) {\\r\\n        if (s_totalSupply == 0){\\r\\n            return s_rewardPerTokenStored;\\r\\n        }\\r\\n        return s_rewardPerTokenStored + (((block.timestamp - s_latestUpdateTime) * REWARD_RATE * 1e18)/ s_totalSupply);\\r\\n    }\\r\\n\\r\\n    // do we allow any tokens? - not allow any token\\r\\n    //      chainlink stuff to convert prices between tokens.\\r\\n    // or just a specific token?\\r\\n    function stake(uint256 amount) external updateReward(msg.sender) moreThanZero(amount){\\r\\n        // keep track of how much this user has staked\\r\\n        // keep track of how much token we have total\\r\\n        // transfer the tokens to this contract\\r\\n        s_balances[msg.sender] = s_balances[msg.sender] + amount;\\r\\n        s_totalSupply = s_totalSupply + amount;\\r\\n        // emit event\\r\\n        bool success = s_stakingToken.transferFrom(msg.sender, address(this), amount);\\r\\n        \\r\\n        // require(success, \\\"failed\\\");\\r\\n        if(!success) {\\r\\n            revert Staking__TransferFailed();\\r\\n        }\\r\\n    } \\r\\n    \\r\\n    function withdraw(uint256 amount) external updateReward(msg.sender){\\r\\n        s_balances[msg.sender] = s_balances[msg.sender] - amount;\\r\\n        s_totalSupply = s_totalSupply - amount;\\r\\n        bool success = s_stakingToken.transfer(msg.sender, amount);\\r\\n        //bool success = s_stakingToken.transferFrom(address(this), msg.sender, amount);\\r\\n        if (!success){\\r\\n            revert Staking__TransferFailed();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function claimReward() external updateReward(msg.sender) {\\r\\n        uint256 reward = s_rewards[msg.sender];\\r\\n        bool success = s_rewardToken.transfer(msg.sender, reward);\\r\\n        if (!success) {\\r\\n            revert Staking__TransferFailed();\\r\\n        }\\r\\n        // How much reward do they get?\\r\\n        \\r\\n        // The contract is going to emit X tokens per second\\r\\n        // And disperse them to all token stakers\\r\\n\\r\\n        // 100 tokens / second\\r\\n        // 50 staked tokens, 20 staked tokens, 30 staked tokens\\r\\n        // rewards: 50 reward tokens, 20 reward tokens, 30 reward tokens\\r\\n\\r\\n        // staked: 100, 50, 20, 30 (total = 200)\\r\\n        // reward: 50, 25, 10, 15\\r\\n\\r\\n        // why not 1 to 1? - bankrupt your protocol\\r\\n        \\r\\n\\r\\n        // 5 seconds, 1 person had 100 tokens staked = reward 500 tokens\\r\\n        // 6 seconds, 2 person have 100 tokens staked each:\\r\\n            // person 1: 550\\r\\n            // person 2: 50\\r\\n        \\r\\n        // ok between seconds 1 and 5, person 1 got 500 tokens\\r\\n        // ok at second 6 on, person 1 gets 50 tokens now\\r\\n    }\\r\\n\\r\\n    function getStaked(address account) public view returns(uint256) {\\r\\n        // get amount staked in the address\\r\\n        return s_balances[account];\\r\\n    }\\r\\n}\\r\\n\\r\\n\",\"keccak256\":\"0x2dd3b317af215fde522581891a302796b08403ce9af27c413c3101538a19514c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200109c3803806200109c8339818101604052810190620000379190620000d7565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000171565b600081519050620000d18162000157565b92915050565b60008060408385031215620000f157620000f062000152565b5b60006200010185828601620000c0565b92505060206200011485828601620000c0565b9150509250929050565b60006200012b8262000132565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b62000162816200011e565b81146200016e57600080fd5b50565b610f1b80620001816000396000f3fe608060405234801561001057600080fd5b50600436106100a85760003560e01c8063ab32eb6911610071578063ab32eb6914610163578063adca9b7214610193578063b88a802f146101b1578063bea08151146101bb578063cd3daf9d146101eb578063f245ace414610209576100a8565b80628cc262146100ad5780632e1a7d4d146100dd578063399080ec146100f95780636374cc0014610129578063a694fc3a14610147575b600080fd5b6100c760048036038101906100c29190610b60565b610239565b6040516100d49190610c8f565b60405180910390f35b6100f760048036038101906100f29190610bba565b610358565b005b610113600480360381019061010e9190610b60565b610590565b6040516101209190610c8f565b60405180910390f35b6101316105d9565b60405161013e9190610c74565b60405180910390f35b610161600480360381019061015c9190610bba565b6105ff565b005b61017d60048036038101906101789190610b60565b610876565b60405161018a9190610c8f565b60405180910390f35b61019b61088e565b6040516101a89190610c74565b60405180910390f35b6101b96108b2565b005b6101d560048036038101906101d09190610b60565b610a8d565b6040516101e29190610c8f565b60405180910390f35b6101f3610aa5565b6040516102009190610c8f565b60405180910390f35b610223600480360381019061021e9190610b60565b610b09565b6040516102309190610c8f565b60405180910390f35b600080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060006102cc610aa5565b90506000600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081670de0b6b3a7640000858561032a9190610d8b565b876103359190610d31565b61033f9190610d00565b6103499190610caa565b90508095505050505050919050565b33610361610aa5565b6007819055504260088190555061037781610239565b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600754600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461044b9190610d8b565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160065461049c9190610d8b565b60068190555060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff1660e01b8152600401610500929190610c4b565b602060405180830381600087803b15801561051a57600080fd5b505af115801561052e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105529190610b8d565b90508061058b576040517feb4c684700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b33610608610aa5565b6007819055504260088190555061061e81610239565b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600754600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008114156106e3576040517f9b677fa000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461072e9190610caa565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508260065461077f9190610caa565b60068190555060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b81526004016107e593929190610c14565b602060405180830381600087803b1580156107ff57600080fd5b505af1158015610813573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108379190610b8d565b905080610870576040517feb4c684700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b60026020528060005260406000206000915090505481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b336108bb610aa5565b600781905550426008819055506108d181610239565b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600754600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b81526004016109fd929190610c4b565b602060405180830381600087803b158015610a1757600080fd5b505af1158015610a2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4f9190610b8d565b905080610a88576040517feb4c684700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b60046020528060005260406000206000915090505481565b6000806006541415610abb576007549050610b06565b600654670de0b6b3a764000060055460085442610ad89190610d8b565b610ae29190610d31565b610aec9190610d31565b610af69190610d00565b600754610b039190610caa565b90505b90565b60036020528060005260406000206000915090505481565b600081359050610b3081610ea0565b92915050565b600081519050610b4581610eb7565b92915050565b600081359050610b5a81610ece565b92915050565b600060208284031215610b7657610b75610e9b565b5b6000610b8484828501610b21565b91505092915050565b600060208284031215610ba357610ba2610e9b565b5b6000610bb184828501610b36565b91505092915050565b600060208284031215610bd057610bcf610e9b565b5b6000610bde84828501610b4b565b91505092915050565b610bf081610dbf565b82525050565b610bff81610e07565b82525050565b610c0e81610dfd565b82525050565b6000606082019050610c296000830186610be7565b610c366020830185610be7565b610c436040830184610c05565b949350505050565b6000604082019050610c606000830185610be7565b610c6d6020830184610c05565b9392505050565b6000602082019050610c896000830184610bf6565b92915050565b6000602082019050610ca46000830184610c05565b92915050565b6000610cb582610dfd565b9150610cc083610dfd565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610cf557610cf4610e3d565b5b828201905092915050565b6000610d0b82610dfd565b9150610d1683610dfd565b925082610d2657610d25610e6c565b5b828204905092915050565b6000610d3c82610dfd565b9150610d4783610dfd565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610d8057610d7f610e3d565b5b828202905092915050565b6000610d9682610dfd565b9150610da183610dfd565b925082821015610db457610db3610e3d565b5b828203905092915050565b6000610dca82610ddd565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610e1282610e19565b9050919050565b6000610e2482610e2b565b9050919050565b6000610e3682610ddd565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600080fd5b610ea981610dbf565b8114610eb457600080fd5b50565b610ec081610dd1565b8114610ecb57600080fd5b50565b610ed781610dfd565b8114610ee257600080fd5b5056fea2646970667358221220e188ebf158c6a7283d6946041bacf7368f2d04468ab1710b9a82ee11fef0ec8864736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a85760003560e01c8063ab32eb6911610071578063ab32eb6914610163578063adca9b7214610193578063b88a802f146101b1578063bea08151146101bb578063cd3daf9d146101eb578063f245ace414610209576100a8565b80628cc262146100ad5780632e1a7d4d146100dd578063399080ec146100f95780636374cc0014610129578063a694fc3a14610147575b600080fd5b6100c760048036038101906100c29190610b60565b610239565b6040516100d49190610c8f565b60405180910390f35b6100f760048036038101906100f29190610bba565b610358565b005b610113600480360381019061010e9190610b60565b610590565b6040516101209190610c8f565b60405180910390f35b6101316105d9565b60405161013e9190610c74565b60405180910390f35b610161600480360381019061015c9190610bba565b6105ff565b005b61017d60048036038101906101789190610b60565b610876565b60405161018a9190610c8f565b60405180910390f35b61019b61088e565b6040516101a89190610c74565b60405180910390f35b6101b96108b2565b005b6101d560048036038101906101d09190610b60565b610a8d565b6040516101e29190610c8f565b60405180910390f35b6101f3610aa5565b6040516102009190610c8f565b60405180910390f35b610223600480360381019061021e9190610b60565b610b09565b6040516102309190610c8f565b60405180910390f35b600080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060006102cc610aa5565b90506000600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081670de0b6b3a7640000858561032a9190610d8b565b876103359190610d31565b61033f9190610d00565b6103499190610caa565b90508095505050505050919050565b33610361610aa5565b6007819055504260088190555061037781610239565b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600754600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461044b9190610d8b565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160065461049c9190610d8b565b60068190555060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff1660e01b8152600401610500929190610c4b565b602060405180830381600087803b15801561051a57600080fd5b505af115801561052e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105529190610b8d565b90508061058b576040517feb4c684700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b33610608610aa5565b6007819055504260088190555061061e81610239565b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600754600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008114156106e3576040517f9b677fa000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461072e9190610caa565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508260065461077f9190610caa565b60068190555060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b81526004016107e593929190610c14565b602060405180830381600087803b1580156107ff57600080fd5b505af1158015610813573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108379190610b8d565b905080610870576040517feb4c684700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b60026020528060005260406000206000915090505481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b336108bb610aa5565b600781905550426008819055506108d181610239565b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600754600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b81526004016109fd929190610c4b565b602060405180830381600087803b158015610a1757600080fd5b505af1158015610a2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4f9190610b8d565b905080610a88576040517feb4c684700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b60046020528060005260406000206000915090505481565b6000806006541415610abb576007549050610b06565b600654670de0b6b3a764000060055460085442610ad89190610d8b565b610ae29190610d31565b610aec9190610d31565b610af69190610d00565b600754610b039190610caa565b90505b90565b60036020528060005260406000206000915090505481565b600081359050610b3081610ea0565b92915050565b600081519050610b4581610eb7565b92915050565b600081359050610b5a81610ece565b92915050565b600060208284031215610b7657610b75610e9b565b5b6000610b8484828501610b21565b91505092915050565b600060208284031215610ba357610ba2610e9b565b5b6000610bb184828501610b36565b91505092915050565b600060208284031215610bd057610bcf610e9b565b5b6000610bde84828501610b4b565b91505092915050565b610bf081610dbf565b82525050565b610bff81610e07565b82525050565b610c0e81610dfd565b82525050565b6000606082019050610c296000830186610be7565b610c366020830185610be7565b610c436040830184610c05565b949350505050565b6000604082019050610c606000830185610be7565b610c6d6020830184610c05565b9392505050565b6000602082019050610c896000830184610bf6565b92915050565b6000602082019050610ca46000830184610c05565b92915050565b6000610cb582610dfd565b9150610cc083610dfd565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610cf557610cf4610e3d565b5b828201905092915050565b6000610d0b82610dfd565b9150610d1683610dfd565b925082610d2657610d25610e6c565b5b828204905092915050565b6000610d3c82610dfd565b9150610d4783610dfd565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610d8057610d7f610e3d565b5b828202905092915050565b6000610d9682610dfd565b9150610da183610dfd565b925082821015610db457610db3610e3d565b5b828203905092915050565b6000610dca82610ddd565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610e1282610e19565b9050919050565b6000610e2482610e2b565b9050919050565b6000610e3682610ddd565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600080fd5b610ea981610dbf565b8114610eb457600080fd5b50565b610ec081610dd1565b8114610ecb57600080fd5b50565b610ed781610dfd565b8114610ee257600080fd5b5056fea2646970667358221220e188ebf158c6a7283d6946041bacf7368f2d04468ab1710b9a82ee11fef0ec8864736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 87,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_stakingToken",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)77"
      },
      {
        "astId": 90,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_rewardToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)77"
      },
      {
        "astId": 94,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_balances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 98,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_userRewardPerTokenPaid",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 102,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_rewards",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 104,
        "contract": "contracts/Staking.sol:Staking",
        "label": "REWARD_RATE",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 106,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_totalSupply",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 108,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_rewardPerTokenStored",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 110,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_latestUpdateTime",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)77": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}